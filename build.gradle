plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
    id 'maven-publish'
    id 'signing'
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.1.5"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        url "https://repo.spring.io/release"
    }
    maven {
        url "https://repository.jboss.org/maven2"
    }
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
    maven {
        url "artifactregistry://asia-south1-maven.pkg.dev/dev-application-294611/maven-qe"
    }
}

sourceCompatibility = 1.8

dependencies {
    //google
    implementation('com.google.guava:guava:30.1.1-jre')
    implementation('com.google.inject:guice:5.0.1')
    implementation('com.google.protobuf:protobuf-java:3.17.3')

    // retrofit
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')

    //grpc
    implementation('io.grpc:grpc-all:1.39.0')

    //lombok
    implementation('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')

    //jboss
    implementation('org.jboss.aerogear:aerogear-otp-java:1.0.0')

    //allure
    implementation('io.qameta.allure:allure-gradle:2.8.1')
    implementation('io.qameta.allure:allure-java-commons:2.14.0')
    implementation('io.qameta.allure:allure-testng:2.14.0')
    implementation('io.qameta.allure:allure-okhttp3:2.14.0')
    implementation('io.qameta.allure:allure-rest-assured:2.14.0')
    implementation 'io.qameta.allure:allure-cucumber6-jvm:2.14.0'

    //logger
    implementation("org.apache.logging.log4j:log4j-core:2.16.0")

    //github
    implementation('com.github.javafaker:javafaker:1.0.2')

    //appium
    implementation('io.appium:java-client:7.5.1')

    //testvagrant
    implementation('dunzoit:ekam-drivers:1.0.4')
    implementation('dunzoit:ekam-report-publisher:0.0.3-beta')
    implementation('dunzoit:ekam-api:1.0.0')
    implementation('dunzoit:ekam-commons:1.0.2')
    implementation('dunzoit:ekam-config:1.0.3')
    implementation('dunzoit:ekam-device-manager:1.0.4')
    implementation('dunzoit:ekam-logger:1.0.0')

    //selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')

    implementation('org.postgresql:postgresql:42.2.23.jre7')
    implementation('commons-dbutils:commons-dbutils:1.7')
    implementation('org.jeasy:easy-random:5.0.0')
    implementation('org.jdbi:jdbi:2.78')
    implementation("javax.annotation:javax.annotation-api:1.3.2")

    // Apache commons-io
    implementation('commons-io:commons-io:2.11.0')

    // Test Framework
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.0-M1')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.0-M1')
    testImplementation('org.junit-pioneer:junit-pioneer:1.4.2')
    implementation('org.testng:testng:7.4.0')
    implementation('io.cucumber:cucumber-java:6.10.4')
    implementation('io.cucumber:cucumber-testng:6.10.4')

    // generic wait
    implementation('org.awaitility:awaitility:4.1.0')
    testImplementation("org.assertj:assertj-guava:2.0.1")

    //Jackson
    implementation('com.fasterxml.jackson.core:jackson-core:2.8.8')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.8.8')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.8.8')
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'dunzoit'
            artifactId 'ekam'
            version '1.3'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

        }
    }

    repositories {
        maven {
            url "artifactregistry://asia-south1-maven.pkg.dev/dev-application-294611/maven-qe"
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'Ekam, a unified test automation platform, helps you to get started with WEB | MOBILE | API Test Automation'
            name 'Ekam'
            url 'https://github.com/dunzoit/ekam'

            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/dunzoit/ekam/-/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/dunzoit/ekam'
                connection 'https://github.com/dunzoit/ekam.git'
                developerConnection 'git@github.com:dunzoit/ekam.git'
            }
            developers {
                developer {
                    name 'vinod'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

task runTests(type: Test) {
    useTestNG()
}
